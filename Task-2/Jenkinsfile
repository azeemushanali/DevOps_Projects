pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/azeemushanali/DevOps_Projects.git'
    }

    stages {
        stage('Setup Git Safe Directory') {
            steps {
                script {
                    echo "Configuring safe directory for Git..."
                    sh 'git config --global --add safe.directory /var/jenkins_home/workspace/test'
                }
            }
        }

        stage('Check Pangram for a Sample String') {
            steps {
                script {
                    try {
                        echo "Running pangram check for a sample string..."
                        sh 'python3 --version'
                        sh 'python3 ./Task-2/check_pangram.py "The quick brown fox jumps over the lazy dog"'
                    } catch (Exception e) {
                        echo "Error during pangram check: ${e}"
                        currentBuild.result = 'FAILURE'
                        error "Sample pangram check failed. Exiting..."
                    }
                }
            }
        }

        stage('Check Pangram for GitHub Commit Messages') {
            steps {
                script {
                    try {
                        // Get the list of recent commit messages
                        echo "Extracting recent commit messages..."
                        def commitMessages = sh(script: 'git log -n 5 --pretty=format:"%s"', returnStdout: true).trim().split("\n")
                        
                        // Check each commit message for pangram status
                        echo "Checking if commit messages are pangrams..."
                        commitMessages.each { commit ->
                            echo "Checking commit message: '${commit}'"
                            def result = sh(script: "python3 check_pangram.py '${commit}'", returnStatus: true)
                            if (result == 0) {
                                echo "Commit message: '${commit}' is a pangram."
                            } else {
                                echo "Commit message: '${commit}' is NOT a pangram."
                            }
                        }
                    } catch (Exception e) {
                        echo "Error while checking commit messages: ${e}"
                        currentBuild.result = 'FAILURE'
                        error "Commit message check failed. Exiting..."
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "Cleaning up workspace..."
                cleanWs()
            }
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Check the logs for more details."
        }
    }
}
