pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/azeemushanali/DevOps_Projects.git'
    }

    stages {
        stage('Setup Git Safe Directory') {
            steps {
                script {
                    echo "Configuring safe directory for Git..."
                    sh 'git config --global --add safe.directory /var/jenkins_home/workspace/test'
                }
            }
        }

        stage('Run Python Script in Docker Container') {
            steps {
                script {
                    // Use a Docker container to run the script
                    docker.image('python:3.9').inside {
                        echo "Running pangram check for a sample string inside a Python Docker container..."
                        
                        // Clone the repository inside the container
                        sh 'git clone https://github.com/azeemushanali/DevOps_Projects.git'
                        
                        // Navigate to the cloned repo directory
                        sh 'cd DevOps_Projects/Task-2'
                        
                        // Run Python script with a sample string as argument
                        sh 'python3 pangram_checker.py "The quick brown fox jumps over the lazy dog"'
                    }
                }
            }
        }

        stage('Check Pangram for GitHub Commit Messages') {
            steps {
                script {
                    docker.image('python:3.9').inside {
                        try {
                            // Clone the repository again for this stage
                            echo "Cloning the repository to check commit messages..."
                            sh 'git clone https://github.com/azeemushanali/DevOps_Projects.git'
                            
                            // Navigate to the correct directory
                            sh 'cd DevOps_Projects/Task-2'
                            
                            // Get the list of recent commit messages
                            echo "Extracting recent commit messages..."
                            def commitMessages = sh(script: 'git log -n 5 --pretty=format:"%s"', returnStdout: true).trim().split("\n")
                            
                            // Check each commit message for pangram status
                            echo "Checking if commit messages are pangrams..."
                            commitMessages.each { commit ->
                                echo "Checking commit message: '${commit}'"
                                def result = sh(script: "python3 pangram_checker.py '${commit}'", returnStatus: true)
                                if (result == 0) {
                                    echo "Commit message: '${commit}' is a pangram."
                                } else {
                                    echo "Commit message: '${commit}' is NOT a pangram."
                                }
                            }
                        } catch (Exception e) {
                            echo "Error while checking commit messages: ${e}"
                            currentBuild.result = 'FAILURE'
                            error "Commit messag
